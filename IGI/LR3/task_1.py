from typing import Callable, Generator, Tuple, Any
from math import exp
from functools import wraps

def sample_term_generator(x: float) -> Generator[float, None, None]:
    """Generates terms x^n/n! for n >= 0"""
    term = 1.0
    n = 0
    while True:
        yield term
        n += 1
        term *= x / n

def print_results_table(func: Callable[..., Tuple[float, int]]) -> Callable[..., Tuple[float, int]]:
    """
    Decorator that prints the calculation results in a table format.
    """
    @wraps(func)
    def wrapper(x: float, eps: float = 1e-6, term_generator_fn: Callable[[float], Generator[float, None, None]] = sample_term_generator, 
               max_iter: int = 500, *args, **kwargs) -> Tuple[float, int]:
        result, iterations = func(x, eps, term_generator_fn, max_iter, *args, **kwargs)

        math_fx = lambda x : exp(x)

        print("\nResults Table:")
        print("+" + "-"*10 + "+" + "-"*10 + "+" + "-"*20 + "+" + "-"*20 + "+" + "-"*10 + "+")
        print(f"| {'x':^8} | {'n':^8} | {'F(x)':^18} | {'Math F(x)':^18} | {'eps':^8} |")
        print("+" + "-"*10 + "+" + "-"*10 + "+" + "-"*20 + "+" + "-"*20 + "+" + "-"*10 + "+")
        print(f"| {x:^8.4f} | {iterations:^8} | {result:^18.10f} | {math_fx(x):^18.10f} | {eps:^8.0e} |")
        print("+" + "-"*10 + "+" + "-"*10 + "+" + "-"*20 + "+" + "-"*20 + "+" + "-"*10 + "+")
        
        return result, iterations
    return wrapper

@print_results_table
def calculateF(
    x: float,
    eps: float = 1e-6,
    term_generator_fn: Callable[[float], Generator[float, None, None]] = sample_term_generator,
    max_iter: int = 500
) -> Tuple[float, int]:
    """
    Calculate the sum of a series generated by term_generator_fn until convergence or max iterations.
    """
    total_sum = 0.0
    term_gen = term_generator_fn(x)
    
    for iteration in range(max_iter):
        try:
            current_term = next(term_gen)
        except StopIteration:
            break

        total_sum += current_term

        if current_term < eps:
            break
    return total_sum, iteration
