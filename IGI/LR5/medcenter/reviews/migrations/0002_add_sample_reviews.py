# Generated by Django 5.2 on 2025-10-28 15:03

from django.db import migrations


def add_sample_reviews(apps, schema_editor):
    """Add sample reviews using existing users with client and doctor profiles."""
    Review = apps.get_model('reviews', 'Review')
    User = apps.get_model('auth', 'User')
    ClientProfile = apps.get_model('clients', 'ClientProfile')
    DoctorProfile = apps.get_model('doctors', 'DoctorProfile')
    Service = apps.get_model('services', 'Service')
    
    # Get users with client profiles
    client_users = User.objects.filter(client_profile__isnull=False).distinct()[:5]
    
    # Get doctors
    doctors = DoctorProfile.objects.all()[:3]
    
    # Get services
    services = Service.objects.all()[:5]
    
    if not client_users.exists():
        print("No client users found. Skipping review creation.")
        return
    
    # Sample reviews data
    reviews_data = [
        {
            'rating': 5,
            'title': 'Отличный сервис!',
            'text': 'Очень доволен качеством обслуживания. Все прошло быстро и профессионально. Рекомендую всем!',
            'is_published': True,
            'is_recommended': True,
        },
        {
            'rating': 5,
            'title': 'Профессиональный подход',
            'text': 'Врач очень внимательно выслушал все жалобы, провел тщательный осмотр. Лечение помогло сразу.',
            'is_published': True,
            'is_recommended': True,
        },
        {
            'rating': 4,
            'title': 'Хорошая клиника',
            'text': 'В целом все понравилось. Единственный минус - долго ждал в очереди, но это того стоило.',
            'is_published': True,
            'is_recommended': False,
        },
        {
            'rating': 5,
            'title': 'Современное оборудование',
            'text': 'Впечатлило оснащение клиники. Все на высшем уровне. Персонал вежливый и отзывчивый.',
            'is_published': True,
            'is_recommended': True,
        },
        {
            'rating': 4,
            'title': 'Качественная диагностика',
            'text': 'Прошел полное обследование. Все четко и быстро. Результаты готовы были в срок.',
            'is_published': True,
            'is_recommended': False,
        },
        {
            'rating': 5,
            'title': 'Спасибо врачу!',
            'text': 'Огромная благодарность за профессионализм и чуткое отношение. Здоровье восстановилось!',
            'is_published': True,
            'is_recommended': True,
        },
        {
            'rating': 3,
            'title': 'Неплохо',
            'text': 'Обслуживание на среднем уровне. Есть к чему стремиться, но в целом приемлемо.',
            'is_published': True,
            'is_recommended': False,
        },
        {
            'rating': 5,
            'title': 'Лучшая клиника в городе',
            'text': 'Обращаюсь сюда уже не первый раз. Всегда высокое качество услуг и доброжелательное отношение.',
            'is_published': True,
            'is_recommended': True,
        },
    ]
    
    # Create reviews for services
    if services.exists():
        for i, review_data in enumerate(reviews_data[:len(services)]):
            client = list(client_users)[i % len(client_users)]
            service = list(services)[i]
            
            # Check if review already exists
            if not Review.objects.filter(user=client, service=service).exists():
                Review.objects.create(
                    user=client,
                    service=service,
                    **review_data
                )
    
    # Create reviews for doctors
    if doctors.exists() and len(reviews_data) > len(services):
        remaining_reviews = reviews_data[len(services):]
        for i, review_data in enumerate(remaining_reviews[:len(doctors)]):
            client_idx = (i + len(services)) % len(client_users)
            client = list(client_users)[client_idx]
            doctor = list(doctors)[i]
            
            # Check if review already exists
            if not Review.objects.filter(user=client, doctor=doctor).exists():
                Review.objects.create(
                    user=client,
                    doctor=doctor,
                    **review_data
                )
    
    print(f"Created {Review.objects.count()} reviews successfully.")


def remove_sample_reviews(apps, schema_editor):
    """Remove sample reviews if migration is reversed."""
    Review = apps.get_model('reviews', 'Review')
    # Delete all reviews (you might want to be more selective)
    count = Review.objects.count()
    Review.objects.all().delete()
    print(f"Deleted {count} reviews.")


class Migration(migrations.Migration):

    dependencies = [
        ('reviews', '0001_initial'),
        ('clients', '0002_alter_clientprofile_options_and_more'),
        ('doctors', '0005_create_doctors_and_clients'),
        ('services', '0002_service_duration'),
    ]

    operations = [
        migrations.RunPython(add_sample_reviews, remove_sample_reviews),
    ]

