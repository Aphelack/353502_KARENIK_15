# Generated migration for service categories and services

from django.db import migrations
from datetime import timedelta


def create_service_data(apps, schema_editor):
    ServiceCategory = apps.get_model('services', 'ServiceCategory')
    Service = apps.get_model('services', 'Service')
    
    # Create service categories with services
    categories_data = [
        {
            'name': 'Терапия',
            'description': 'Общие терапевтические услуги',
            'services': [
                ('Первичный прием терапевта', 'Консультация врача-терапевта с осмотром и назначением лечения', 35.00, 30),
                ('Повторный прием терапевта', 'Консультация врача-терапевта при повторном обращении', 25.00, 20),
                ('Вызов терапевта на дом', 'Выезд врача-терапевта на дом к пациенту', 50.00, 60),
            ]
        },
        {
            'name': 'Кардиология',
            'description': 'Диагностика и лечение сердечно-сосудистых заболеваний',
            'services': [
                ('Прием кардиолога', 'Консультация врача-кардиолога с ЭКГ', 45.00, 40),
                ('ЭКГ', 'Электрокардиография', 15.00, 15),
                ('Холтер-мониторинг', 'Суточное мониторирование ЭКГ', 80.00, 1440),
                ('УЗИ сердца', 'Эхокардиография', 60.00, 30),
            ]
        },
        {
            'name': 'Неврология',
            'description': 'Лечение заболеваний нервной системы',
            'services': [
                ('Прием невролога', 'Консультация врача-невролога', 40.00, 30),
                ('Электроэнцефалография', 'ЭЭГ - исследование электрической активности мозга', 50.00, 45),
            ]
        },
        {
            'name': 'Гастроэнтерология',
            'description': 'Диагностика и лечение заболеваний ЖКТ',
            'services': [
                ('Прием гастроэнтеролога', 'Консультация врача-гастроэнтеролога', 40.00, 30),
                ('ФГДС', 'Фиброгастродуоденоскопия', 70.00, 30),
                ('УЗИ органов брюшной полости', 'Ультразвуковое исследование ЖКТ', 35.00, 20),
            ]
        },
        {
            'name': 'Эндокринология',
            'description': 'Лечение эндокринных заболеваний',
            'services': [
                ('Прием эндокринолога', 'Консультация врача-эндокринолога', 40.00, 30),
                ('УЗИ щитовидной железы', 'Ультразвуковое исследование щитовидной железы', 25.00, 15),
            ]
        },
        {
            'name': 'Лабораторная диагностика',
            'description': 'Все виды анализов',
            'services': [
                ('Общий анализ крови', 'Клинический анализ крови с лейкоформулой', 12.00, 10),
                ('Биохимический анализ крови', 'Расширенный биохимический анализ', 25.00, 10),
                ('Общий анализ мочи', 'Клинический анализ мочи', 8.00, 10),
                ('Анализ на гормоны щитовидной железы', 'ТТГ, Т3, Т4', 30.00, 10),
                ('Анализ на глюкозу', 'Определение уровня глюкозы в крови', 5.00, 5),
            ]
        },
        {
            'name': 'Функциональная диагностика',
            'description': 'Инструментальные методы обследования',
            'services': [
                ('Комплексное УЗИ брюшной полости', 'Комплексное ультразвуковое исследование', 40.00, 30),
                ('УЗИ почек', 'Ультразвуковое исследование почек', 25.00, 20),
                ('УЗИ малого таза', 'Ультразвуковое исследование органов малого таза', 30.00, 20),
                ('ЭКГ с расшифровкой', 'Электрокардиография с заключением', 18.00, 20),
            ]
        },
    ]
    
    for cat_data in categories_data:
        category = ServiceCategory.objects.create(
            name=cat_data['name'],
            description=cat_data['description']
        )
        
        for name, description, price, duration in cat_data['services']:
            Service.objects.create(
                name=name,
                description=description,
                price=price,
                duration=timedelta(minutes=duration),
                category=category
            )


class Migration(migrations.Migration):

    dependencies = [
        ('services', '0002_service_duration'),
    ]

    operations = [
        migrations.RunPython(create_service_data),
    ]
