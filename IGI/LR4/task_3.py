from typing import Callable, Generator, Tuple
from math import exp
from functools import wraps
import numpy as np

def sample_term_generator(x: float) -> Generator[float, None, None]:
    """Generates terms x^n/n! for n >= 0"""
    term = 1.0
    n = 0
    while True:
        yield term
        n += 1
        term *= x / n

def print_results_table(func: Callable[..., Tuple[float, int]]) -> Callable[..., Tuple[float, int]]:
    """
    Decorator that prints the calculation results in a table format.
    """
    @wraps(func)
    def wrapper(self, x: float, eps: float = 1e-6, max_iter: int = 500, *args, **kwargs) -> Tuple[float, int]:
        result, iterations = func(self, x, eps, max_iter, *args, **kwargs)

        math_fx = lambda x: exp(x)

        print("\nResults Table:")
        print("+" + "-"*10 + "+" + "-"*10 + "+" + "-"*20 + "+" + "-"*20 + "+" + "-"*10 + "+")
        print(f"| {x:^8.4f} | {iterations:^8} | {result:^18.10f} | {math_fx(x):^18.10f} | {eps:^8.0e} |")
        print("+" + "-"*10 + "+" + "-"*10 + "+" + "-"*20 + "+" + "-"*20 + "+" + "-"*10 + "+")
        
        return result, iterations
    return wrapper

class Calculator:
    def __init__(self, term_generator_fn: Callable[[float], Generator[float, None, None]] = sample_term_generator, math_fn: Callable[[float], float] = exp):
        self.term_generator_fn = term_generator_fn
        self.math_fn = math_fn
        self.elements = []

    def mean(self) -> float:
        return np.mean(self.elements)

    def median(self) -> float:
        return float(np.median(self.elements))

    def variance(self) -> float:
        return float(np.var(self.elements, ddof=1))

    def standart_deviation(self) -> float:
        return float(np.mean([(self.math_fn(x) - x) ** 2 for x in self.elements]))

    @print_results_table
    def calculateF(
        self,
        x: float,
        eps: float = 1e-6,
        max_iter: int = 500
    ) -> Tuple[float, int]:
        """
        Calculate the sum of a series generated by term_generator_fn until convergence or max iterations.
        """
        total_sum = 0.0
        term_gen = self.term_generator_fn(x)
        self.elements.clear()
        
        for iteration in range(max_iter):
            try:
                current_term = next(term_gen)
            except StopIteration:
                break

            total_sum += current_term
            self.elements.append(current_term)

            if current_term < eps:
                break
        return total_sum, iteration

calculator = Calculator()    
calculator.calculateF(2.5)

print(calculator.elements)

import matplotlib.pyplot as plt

x_values = [i * 0.5 for i in range(11)]
series_values = []
exact_values = []

for x in x_values:
    result, _ = calculator.calculateF(x)
    series_values.append(result)
    exact_values.append(exp(x))

plt.figure(figsize=(10, 6))

plt.plot(x_values, series_values, label="Series Approximation", color="blue", marker="o")

plt.plot(x_values, exact_values, label="Exact Function (math.exp)", color="red", linestyle="--")

plt.xlabel("x", fontsize=12)
plt.ylabel("f(x)", fontsize=12)
plt.title("Comparison of Series Approximation and Exact Function", fontsize=14)
plt.legend(loc="upper left")

plt.grid(True, linestyle="--", alpha=0.7)

plt.show()
